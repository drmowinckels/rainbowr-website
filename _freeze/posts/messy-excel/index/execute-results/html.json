{
  "hash": "37e453358f1eb2e9a947d7ea6496be3c",
  "result": {
    "markdown": "---\ntitle: \"Messy Excel Tables\"\nauthor: \"Zane Dax (She/They)\"\ndate: \"May 26, 2022\"\nimage: excel-img.png\ndescription: \"Clean messy heavily formatted Excel spreadsheets and tables.\"\ncategories: [excel, data tables, analysis]\nformat: html\neditor: visual\ntheme: vapor\ndraft: true\ntags: \n  - excel\n  - data-table\n---\n\n\n## Messy Excel spreadsheets\n\nFinding LGBTQ datasets in the world, I often find `.xlsx` files, these are often very messy or formatted in a way that is less than ideal. This blog will show how to convert the Excel spreadsheet into a `tidyverse` dataset.\n\n## Book Tutorial\n\nWe will first use a eBook tutorial **Spreadsheet Munging Strategies** but I will provide details on each step of the process. The data tables for this tutorial are Australian Bureau of Statistics, download the data [here](https://github.com/nacnudus/smungs/blob/master/inst/extdata/ozmarriage.xlsx?raw=true).\n\nThe data tables look like this ![table 1](AUS-table1.png)\n\n![table 2](AUS-table2.png) Notice on the left side the rows have nested State Divisions with regions, and the columns are response and participants.\n\n### Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(tidyxl)\n# install.packages('unpivotr')\nlibrary(unpivotr)\n```\n:::\n\n\n### Data tables\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncells = xlsx_cells(\"ozmarriage.xlsx\")\ncells\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4,699 × 21\n   sheet    address   row   col is_blank data_type error logical numeric\n   <chr>    <chr>   <int> <int> <lgl>    <chr>     <chr> <lgl>     <dbl>\n 1 Contents A1          1     1 FALSE    character <NA>  NA           NA\n 2 Contents B1          1     2 TRUE     blank     <NA>  NA           NA\n 3 Contents C1          1     3 TRUE     blank     <NA>  NA           NA\n 4 Contents D1          1     4 TRUE     blank     <NA>  NA           NA\n 5 Contents E1          1     5 TRUE     blank     <NA>  NA           NA\n 6 Contents F1          1     6 TRUE     blank     <NA>  NA           NA\n 7 Contents G1          1     7 TRUE     blank     <NA>  NA           NA\n 8 Contents H1          1     8 TRUE     blank     <NA>  NA           NA\n 9 Contents I1          1     9 TRUE     blank     <NA>  NA           NA\n10 Contents J1          1    10 TRUE     blank     <NA>  NA           NA\n# … with 4,689 more rows, and 12 more variables: date <dttm>, character <chr>,\n#   character_formatted <list>, formula <chr>, is_array <lgl>,\n#   formula_ref <chr>, formula_group <int>, comment <chr>, height <dbl>,\n#   width <dbl>, style_format <chr>, local_format_id <int>\n```\n:::\n\n```{.r .cell-code}\n# allows for getting table formatting \nformats = xlsx_formats(\"ozmarriage.xlsx\")\n```\n:::\n\n\nThe whole Excel data is 4699 rows and 21 variables, all table (sheets) combined. We want to just get table 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Table 1\ncells %>% \n  filter(sheet == \"Table 1\", row >= 5L, !is_blank)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 162 × 21\n   sheet   address   row   col is_blank data_type error logical numeric\n   <chr>   <chr>   <int> <int> <lgl>    <chr>     <chr> <lgl>     <dbl>\n 1 Table 1 B5          5     2 FALSE    character <NA>  NA           NA\n 2 Table 1 I5          5     9 FALSE    character <NA>  NA           NA\n 3 Table 1 B6          6     2 FALSE    character <NA>  NA           NA\n 4 Table 1 D6          6     4 FALSE    character <NA>  NA           NA\n 5 Table 1 F6          6     6 FALSE    character <NA>  NA           NA\n 6 Table 1 I6          6     9 FALSE    character <NA>  NA           NA\n 7 Table 1 K6          6    11 FALSE    character <NA>  NA           NA\n 8 Table 1 M6          6    13 FALSE    character <NA>  NA           NA\n 9 Table 1 O6          6    15 FALSE    character <NA>  NA           NA\n10 Table 1 B7          7     2 FALSE    character <NA>  NA           NA\n# … with 152 more rows, and 12 more variables: date <dttm>, character <chr>,\n#   character_formatted <list>, formula <chr>, is_array <lgl>,\n#   formula_ref <chr>, formula_group <int>, comment <chr>, height <dbl>,\n#   width <dbl>, style_format <chr>, local_format_id <int>\n```\n:::\n:::\n\n\nSo far this looks like nothing like the picture, so we will need pull out the column headers by using the `unpivotr::behead()` function to chop away all that formatting. The image below will help make sense of what is being beheaded.\n\n![table 2](AUS-step.png)\n\nThe image shows Table 2 as it is similar to table 1, except for the nested regions under state. The column names we will use are basic generalized variables of what the columns store, name the column `response` instead of \"response clear\" and `population` instead of \"eligible participants\". The regions under `state` will be moved.\n\n### Step 2\n\nUsing the image above as a guide in what we are chopping is the response and population columns, the direction of where they are located is important to have. These beheaded columns are at the end of the data table, but will be moved soon.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncells %>% \n  filter(sheet == \"Table 1\", row >= 5L, !is_blank) %>% \n  behead(\"up-left\",'population') %>% \n  behead('up-left','response')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 153 × 23\n   sheet   address   row   col is_blank data_type error logical   numeric\n   <chr>   <chr>   <int> <int> <lgl>    <chr>     <chr> <lgl>       <dbl>\n 1 Table 1 B7          7     2 FALSE    character <NA>  NA           NA  \n 2 Table 1 C7          7     3 FALSE    character <NA>  NA           NA  \n 3 Table 1 B8          8     2 FALSE    numeric   <NA>  NA      2374362  \n 4 Table 1 C8          8     3 FALSE    numeric   <NA>  NA           57.8\n 5 Table 1 B9          9     2 FALSE    numeric   <NA>  NA      2145629  \n 6 Table 1 C9          9     3 FALSE    numeric   <NA>  NA           64.9\n 7 Table 1 B10        10     2 FALSE    numeric   <NA>  NA      1487060  \n 8 Table 1 C10        10     3 FALSE    numeric   <NA>  NA           60.7\n 9 Table 1 B11        11     2 FALSE    numeric   <NA>  NA       592528  \n10 Table 1 C11        11     3 FALSE    numeric   <NA>  NA           62.5\n# … with 143 more rows, and 14 more variables: date <dttm>, character <chr>,\n#   character_formatted <list>, formula <chr>, is_array <lgl>,\n#   formula_ref <chr>, formula_group <int>, comment <chr>, height <dbl>,\n#   width <dbl>, style_format <chr>, local_format_id <int>, population <chr>,\n#   response <chr>\n```\n:::\n:::\n\n\n### Step 3\n\nThis step we are grabbing the `no.` and `%` columns underneath the response and population columns. The unit column will be nested and is placed at the end of the data table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncells %>% \n  filter(sheet == \"Table 1\", row >= 5L, !is_blank) %>% \n  behead(\"up-left\",'population') %>% \n  behead('up-left','response') %>% \n  behead('up','unit')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 139 × 24\n   sheet   address   row   col is_blank data_type error logical   numeric\n   <chr>   <chr>   <int> <int> <lgl>    <chr>     <chr> <lgl>       <dbl>\n 1 Table 1 B8          8     2 FALSE    numeric   <NA>  NA      2374362  \n 2 Table 1 C8          8     3 FALSE    numeric   <NA>  NA           57.8\n 3 Table 1 B9          9     2 FALSE    numeric   <NA>  NA      2145629  \n 4 Table 1 C9          9     3 FALSE    numeric   <NA>  NA           64.9\n 5 Table 1 B10        10     2 FALSE    numeric   <NA>  NA      1487060  \n 6 Table 1 C10        10     3 FALSE    numeric   <NA>  NA           60.7\n 7 Table 1 B11        11     2 FALSE    numeric   <NA>  NA       592528  \n 8 Table 1 C11        11     3 FALSE    numeric   <NA>  NA           62.5\n 9 Table 1 B12        12     2 FALSE    numeric   <NA>  NA       801575  \n10 Table 1 C12        12     3 FALSE    numeric   <NA>  NA           63.7\n# … with 129 more rows, and 15 more variables: date <dttm>, character <chr>,\n#   character_formatted <list>, formula <chr>, is_array <lgl>,\n#   formula_ref <chr>, formula_group <int>, comment <chr>, height <dbl>,\n#   width <dbl>, style_format <chr>, local_format_id <int>, population <chr>,\n#   response <chr>, unit <chr>\n```\n:::\n:::\n\n\n### Step 4\n\nThis step is grabbing the states located on the left side. The left location is left of the formatted columns, there will often be 2 left columns next to each other, yet the locations for `behead()` are left. The state is placed at the end of the data table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncells %>% \n  filter(sheet == \"Table 1\", row >= 5L, !is_blank) %>% \n  behead(\"up-left\",'population') %>% \n  behead('up-left','response') %>% \n  behead('up','unit') %>% \n  behead('left','state') %>% \n  arrange(row, col)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 126 × 25\n   sheet   address   row   col is_blank data_type error logical   numeric\n   <chr>   <chr>   <int> <int> <lgl>    <chr>     <chr> <lgl>       <dbl>\n 1 Table 1 B8          8     2 FALSE    numeric   <NA>  NA      2374362  \n 2 Table 1 C8          8     3 FALSE    numeric   <NA>  NA           57.8\n 3 Table 1 D8          8     4 FALSE    numeric   <NA>  NA      1736838  \n 4 Table 1 E8          8     5 FALSE    numeric   <NA>  NA           42.2\n 5 Table 1 F8          8     6 FALSE    numeric   <NA>  NA      4111200  \n 6 Table 1 G8          8     7 FALSE    numeric   <NA>  NA          100  \n 7 Table 1 I8          8     9 FALSE    numeric   <NA>  NA      4111200  \n 8 Table 1 J8          8    10 FALSE    numeric   <NA>  NA           79.2\n 9 Table 1 K8          8    11 FALSE    numeric   <NA>  NA        11036  \n10 Table 1 L8          8    12 FALSE    numeric   <NA>  NA            0.2\n# … with 116 more rows, and 16 more variables: date <dttm>, character <chr>,\n#   character_formatted <list>, formula <chr>, is_array <lgl>,\n#   formula_ref <chr>, formula_group <int>, comment <chr>, height <dbl>,\n#   width <dbl>, style_format <chr>, local_format_id <int>, population <chr>,\n#   response <chr>, unit <chr>, state <chr>\n```\n:::\n:::\n\n\n### Step 5\n\nIn this step we arrange the data table by row and column, selecting the columns we want from the Excel data table. The columns `row`, `data_type` and `numeric` are required here, before the selection of the columns. You will see that unit remains nested.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncells %>% \n  filter(sheet == \"Table 1\", row >= 5L, !is_blank) %>% \n  behead(\"up-left\",'population') %>% \n  behead('up-left','response') %>% \n  behead('up','unit') %>% \n  behead('left','state') %>% \n  arrange(row, col) %>% \n  select( row, data_type, numeric, # required columns\n          state, population, response, unit\n          )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 126 × 7\n     row data_type   numeric state           population           response unit \n   <int> <chr>         <dbl> <chr>           <chr>                <chr>    <chr>\n 1     8 numeric   2374362   New South Wales Response clear       Yes      no.  \n 2     8 numeric        57.8 New South Wales Response clear       Yes      %    \n 3     8 numeric   1736838   New South Wales Response clear       No       no.  \n 4     8 numeric        42.2 New South Wales Response clear       No       %    \n 5     8 numeric   4111200   New South Wales Response clear       Total    no.  \n 6     8 numeric       100   New South Wales Response clear       Total    %    \n 7     8 numeric   4111200   New South Wales Eligible Participan… Respons… no.  \n 8     8 numeric        79.2 New South Wales Eligible Participan… Respons… %    \n 9     8 numeric     11036   New South Wales Eligible Participan… Respons… no.  \n10     8 numeric         0.2 New South Wales Eligible Participan… Respons… %    \n# … with 116 more rows\n```\n:::\n\n```{.r .cell-code}\n# the rows of states are now a column !!!\n```\n:::\n\n\n### Step 6\n\nIn step 5 we grabbed the columns we wanted, along with the ones we rather not have like the row and data_type. The column numeric held the numeric data we care about. To unnest the unit column that has `%` and `no.`, we use `spatter()` function, which will move them into separated columns.\n\nThis step we want the units separated and to have state as first column. We have a tidy data table, which could be saved as a `.csv` file. We selected our columns in the order we want, `spatter()` the nested column into separate column, and to drop the row column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncells %>% \n  filter(sheet == \"Table 1\", row >= 5L, !is_blank) %>% \n  behead(\"up-left\",'population') %>% \n  behead('up-left','response') %>% \n  behead('up','unit') %>% \n  behead('left','state') %>% \n  arrange(row, col) %>% \n  select( row, data_type, numeric, state, population, response, unit) %>% \n  spatter(unit) %>% # breaks up the % no. into columns\n  select(-row)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 63 × 5\n   state           population            response                  `%`     no.\n   <chr>           <chr>                 <chr>                   <dbl>   <dbl>\n 1 New South Wales Eligible Participants \"Non-responding\"         20.5 1065445\n 2 New South Wales Eligible Participants \"Response clear\"         79.2 4111200\n 3 New South Wales Eligible Participants \"Response not clear(a)\"   0.2   11036\n 4 New South Wales Eligible Participants \"Total \"                100   5187681\n 5 New South Wales Response clear        \"No\"                     42.2 1736838\n 6 New South Wales Response clear        \"Total\"                 100   4111200\n 7 New South Wales Response clear        \"Yes\"                    57.8 2374362\n 8 Victoria        Eligible Participants \"Non-responding\"         18.3  743634\n 9 Victoria        Eligible Participants \"Response clear\"         81.4 3306727\n10 Victoria        Eligible Participants \"Response not clear(a)\"   0.3   11028\n# … with 53 more rows\n```\n:::\n:::\n\n\n# Conclusion\n\nThis tutorial was my version of a eBook tutorial on cleaning Excel spreadsheets, broken down into steps with some explanations on each function. Although this blog showed how to do Table 1, the same process is applied to other messy Excel spreadsheets. I recommend going in steps as sometimes you `unhead()` a column which sometimes has nested data meant for another column.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}